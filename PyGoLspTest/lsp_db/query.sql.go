// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package lsp_db

import (
	"context"
	"database/sql"
)

const insertDocument = `-- name: InsertDocument :one
INSERT INTO Document(path, tree_id, code) VALUES(?, ?, ?) RETURNING id, path, tree_id, code
`

type InsertDocumentParams struct {
	Path   string
	TreeID int64
	Code   string
}

func (q *Queries) InsertDocument(ctx context.Context, arg InsertDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, insertDocument, arg.Path, arg.TreeID, arg.Code)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.TreeID,
		&i.Code,
	)
	return i, err
}

const insertPyEnv = `-- name: InsertPyEnv :exec
INSERT INTO PyEnv(py_name, os_name,py_row, py_start_column, py_end_column, py_document_id) VALUES(?, ?,?,?,?,?) ON CONFLICT(os_name) DO NOTHING
`

type InsertPyEnvParams struct {
	PyName        sql.NullString
	OsName        string
	PyRow         sql.NullInt64
	PyStartColumn sql.NullInt64
	PyEndColumn   sql.NullInt64
	PyDocumentID  sql.NullInt64
}

func (q *Queries) InsertPyEnv(ctx context.Context, arg InsertPyEnvParams) error {
	_, err := q.db.ExecContext(ctx, insertPyEnv,
		arg.PyName,
		arg.OsName,
		arg.PyRow,
		arg.PyStartColumn,
		arg.PyEndColumn,
		arg.PyDocumentID,
	)
	return err
}

const insertYamlEnv = `-- name: InsertYamlEnv :exec
INSERT INTO YamlEnv( os_name,yaml_row, yaml_start_column, yaml_end_column, yaml_document_id) VALUES(?,?,?,?,?)ON CONFLICT(os_name) DO NOTHING
`

type InsertYamlEnvParams struct {
	OsName          string
	YamlRow         sql.NullInt64
	YamlStartColumn sql.NullInt64
	YamlEndColumn   sql.NullInt64
	YamlDocumentID  sql.NullInt64
}

func (q *Queries) InsertYamlEnv(ctx context.Context, arg InsertYamlEnvParams) error {
	_, err := q.db.ExecContext(ctx, insertYamlEnv,
		arg.OsName,
		arg.YamlRow,
		arg.YamlStartColumn,
		arg.YamlEndColumn,
		arg.YamlDocumentID,
	)
	return err
}

const pyEnvByLocation = `-- name: PyEnvByLocation :one
SELECT os_name FROM PyEnv 
JOIN Document ON Document.id=PyEnv.py_document_id  
WHERE Document.path=? 
AND PyEnv.py_start_column>=? 
AND PyEnv.py_end_column>=? 
AND PyEnv.py_row=?
`

type PyEnvByLocationParams struct {
	Path          string
	PyStartColumn sql.NullInt64
	PyEndColumn   sql.NullInt64
	PyRow         sql.NullInt64
}

func (q *Queries) PyEnvByLocation(ctx context.Context, arg PyEnvByLocationParams) (string, error) {
	row := q.db.QueryRowContext(ctx, pyEnvByLocation,
		arg.Path,
		arg.PyStartColumn,
		arg.PyEndColumn,
		arg.PyRow,
	)
	var os_name string
	err := row.Scan(&os_name)
	return os_name, err
}

const selectYamlEnvByName = `-- name: SelectYamlEnvByName :one
SELECT yaml_row, yaml_start_column, yaml_end_column, Document.path  FROM YamlEnv 
JOIN Document ON Document.id=yaml_document_id 
WHERE os_name=?
`

type SelectYamlEnvByNameRow struct {
	YamlRow         sql.NullInt64
	YamlStartColumn sql.NullInt64
	YamlEndColumn   sql.NullInt64
	Path            string
}

func (q *Queries) SelectYamlEnvByName(ctx context.Context, osName string) (SelectYamlEnvByNameRow, error) {
	row := q.db.QueryRowContext(ctx, selectYamlEnvByName, osName)
	var i SelectYamlEnvByNameRow
	err := row.Scan(
		&i.YamlRow,
		&i.YamlStartColumn,
		&i.YamlEndColumn,
		&i.Path,
	)
	return i, err
}
